import org.jetbrains.dokka.gradle.DokkaTask

apply plugin: 'com.android.library'
apply plugin: 'jacoco'
apply plugin: 'maven-publish'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'org.jetbrains.kotlin.android'
apply plugin: 'signing'
apply plugin: 'org.jetbrains.dokka'




jacoco {
    toolVersion = "0.8.5"
}

project.ext {
    archLifecycleVersion = "2.2.0"
}

android {
    compileSdkVersion 33
    buildToolsVersion "30.0.3"
    namespace "com.psaanalytics.psa.tracker"

    useLibrary 'android.test.base'

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 31
        versionCode 1
        versionName "6.0.4"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            buildConfigField "String", "TRACKER_LABEL", "\"andr-6.0.4\""
            buildConfigField "String", "TRACKER_VERSION", "\"6.0.4\""

            testCoverageEnabled = true
        }
        release {
            buildConfigField "String", "TRACKER_LABEL", "\"andr-6.0.4\""
            buildConfigField "String", "TRACKER_VERSION", "\"6.0.4\""

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    buildFeatures {
        buildConfig = true
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/DEPENDENCIES'
    }

    lintOptions {
        disable 'InvalidPackage'
        abortOnError false
    }

    sourceSets {
        androidTest.manifest.srcFile "src/androidTest/AndroidManifest.xml"
    }

    compileOptions {
        coreLibraryDesugaringEnabled true

        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = '11'
    }

    // This enables long timeouts required on slow environments
    adbOptions {
        timeOutInMs 10 * 60 * 1000  // Set the timeout to 10 minutes
        installOptions "-d","-t"
    }
}

dependencies {
    implementation 'androidx.annotation:annotation:1.6.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.core:core-ktx:1.10.1'
    implementation 'androidx.preference:preference:1.2.1'
    compileOnly "androidx.lifecycle:lifecycle-extensions:$project.archLifecycleVersion"
    compileOnly "com.android.installreferrer:installreferrer:2.2"

    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.9'

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.squareup.okhttp3:okhttp:4.10.0'
    // test
    testImplementation "androidx.lifecycle:lifecycle-extensions:$project.archLifecycleVersion"
    testImplementation "com.android.installreferrer:installreferrer:2.2"
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation 'com.google.android.gms:play-services-analytics:18.0.3'
    androidTestImplementation 'com.squareup.okhttp3:mockwebserver:4.7.2'
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

task javadoc(type: Javadoc) {
    configurations.implementation.setCanBeResolved(true)

    failOnError false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.implementation
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

android.libraryVariants.all { variant ->
    task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
        title = "Documentation for snowplow-android-core $version API"
        description "Generates Javadoc for $variant.name."
        source = variant.getJavaCompileProvider().get().source
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        doFirst { classpath = files(variant.javaCompiler.classpath.files) + files(ext.androidJar) }
        options.links("http://docs.oracle.com/javase/7/docs/api/");
        exclude '**/R.java'
    }
}

coveralls {
    jacocoReportPath "$buildDir/reports/coverage/debug/report.xml"
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}



afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                groupId = 'com.github.amanbhobhria'
                artifactId = 'psa-tracker'
                version = '6.0.4'

                from components.release
                artifact sourcesJar
                artifact javadocJar

                pom {
                    name = 'psa-tracker'
                    packaging = 'aar'
                    description = 'PSA Tracker Library'
                    url = 'https://github.com/amanbhobhria/psa-tracker'

                    licenses {
                        license {
                            name = 'The Apache Software License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution = 'repo'
                        }
                    }

                    developers {
                        developer {
                            id = 'amanbhobhria'
                            name = 'Aman Bhobhria'
                        }
                    }

                    scm {
                        url = 'https://github.com/amanbhobhria/psa-tracker'
                        connection = 'scm:git:git://github.com/amanbhobhria/psa-tracker.git'
                        developerConnection = 'scm:git:ssh://github.com/amanbhobhria/psa-tracker.git'
                    }
                }
            }
        }
    }

    tasks.withType(DokkaTask.class) {
        dokkaSourceSets {
            configureEach {
                includes.from(project.files(), "Module.md")

                perPackageOption {
                    matchingRegex.set("com.psaanalytics.core.*")
                    // exclude core packages from API docs
                    suppress.set(true)
                }
            }
        }
    }
}